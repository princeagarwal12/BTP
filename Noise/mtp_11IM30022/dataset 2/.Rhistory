}
}
}
}
recall = tp/(tp+fn)
F1 = (2*precision*recall)/(precision+recall)
knn
MAE
RMSE
precision
recall
F1
fp
tp
fn
not_able_to_predict
knn = 85
#actual = read.csv("Movielense.csv",hwader = FALSE)
#sorted = read.csv("sorted2.csv")
#sim_bc = read.csv("sim_bc.csv")
#find = read.csv("find_filter.csv")
#testing = read.csv("testing.csv",header = FALSE)
#testing = data.frame(t(testing))
predict = matrix(0 , nrow = nrow(x) ,ncol =ncol(x))
predict = data.frame(predict)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
for(k in 1:knn){
if(x[find[i,k],j] > 0){
predict[i,j] = predict[i,j] + sorted[i,k]*(x[find[i,k],j]- mean[find[i,k],1])
}
}
}
}
}
predict_deno = matrix(0 , nrow = nrow(x) ,ncol = ncol(x))
predict_deno = data.frame(predict_deno)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
for(k in 1:knn){
if(x[find[i,k],j] > 0){
predict_deno[i,j] = predict_deno[i,j] + abs(sorted[i,k])
}
}
}
}
}
prediction = matrix(0 , nrow = nrow(x), ncol= ncol(x))
prediction = data.frame(prediction)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
prediction[i,j] = mean[i,1]+(predict[i,j]/predict_deno[i,j])
}
}
}
################remove the na value from prediction #####################
#prediction = read.csv("prediction.csv"
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(is.na(prediction[i,j])){
prediction[i,j] =0
}
}
}
actual = read.csv("actual.csv",header = FALSE)
actual = data.frame(t(actual))
not_able_to_predict = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(is.na(prediction[i,j])){
prediction[i,j] = 0
not_able_to_predict = not_able_to_predict+1
}
}
}
MAE = 0
count = 0
for(i in 1:nrow(prediction)){
for(j in 1:ncol(prediction)){
if(testing[i,j]==100){
count = count + 1
MAE = MAE + abs(actual[i,j]- prediction[i,j])
}
}
}
MAE = MAE/385
# -------------------- RMSE
RMSE = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
RMSE = RMSE + (actual[i,j]- prediction[i,j])*(actual[i,j]- prediction[i,j])
}
}
}
RMSE = sqrt(RMSE/385)
##########################################################################################
# true positive
tp = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(prediction[i,j] >=4 & actual[i,j]>=4){
tp = tp + 1
}
}
}
fp = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(prediction[i,j] >=4 & actual[i,j] < 4){
fp = fp+1
}
}
}
precision = tp/(fp+tp)
fn = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
if(actual[i,j] >=4 & prediction[i,j] <4 & prediction[i,j] > 0){
fn = fn+1
}
}
}
}
recall = tp/(tp+fn)
F1 = (2*precision*recall)/(precision+recall)
knn
MAE
RMSE
precision
recall
F1
fp
tp
fn
not_able_to_predict
knn = 90
#actual = read.csv("Movielense.csv",hwader = FALSE)
#sorted = read.csv("sorted2.csv")
#sim_bc = read.csv("sim_bc.csv")
#find = read.csv("find_filter.csv")
#testing = read.csv("testing.csv",header = FALSE)
#testing = data.frame(t(testing))
predict = matrix(0 , nrow = nrow(x) ,ncol =ncol(x))
predict = data.frame(predict)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
for(k in 1:knn){
if(x[find[i,k],j] > 0){
predict[i,j] = predict[i,j] + sorted[i,k]*(x[find[i,k],j]- mean[find[i,k],1])
}
}
}
}
}
predict_deno = matrix(0 , nrow = nrow(x) ,ncol = ncol(x))
predict_deno = data.frame(predict_deno)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
for(k in 1:knn){
if(x[find[i,k],j] > 0){
predict_deno[i,j] = predict_deno[i,j] + abs(sorted[i,k])
}
}
}
}
}
prediction = matrix(0 , nrow = nrow(x), ncol= ncol(x))
prediction = data.frame(prediction)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
prediction[i,j] = mean[i,1]+(predict[i,j]/predict_deno[i,j])
}
}
}
################remove the na value from prediction #####################
#prediction = read.csv("prediction.csv"
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(is.na(prediction[i,j])){
prediction[i,j] =0
}
}
}
actual = read.csv("actual.csv",header = FALSE)
actual = data.frame(t(actual))
not_able_to_predict = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(is.na(prediction[i,j])){
prediction[i,j] = 0
not_able_to_predict = not_able_to_predict+1
}
}
}
MAE = 0
count = 0
for(i in 1:nrow(prediction)){
for(j in 1:ncol(prediction)){
if(testing[i,j]==100){
count = count + 1
MAE = MAE + abs(actual[i,j]- prediction[i,j])
}
}
}
MAE = MAE/385
# -------------------- RMSE
RMSE = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
RMSE = RMSE + (actual[i,j]- prediction[i,j])*(actual[i,j]- prediction[i,j])
}
}
}
RMSE = sqrt(RMSE/385)
##########################################################################################
# true positive
tp = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(prediction[i,j] >=4 & actual[i,j]>=4){
tp = tp + 1
}
}
}
fp = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(prediction[i,j] >=4 & actual[i,j] < 4){
fp = fp+1
}
}
}
precision = tp/(fp+tp)
fn = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
if(actual[i,j] >=4 & prediction[i,j] <4 & prediction[i,j] > 0){
fn = fn+1
}
}
}
}
recall = tp/(tp+fn)
F1 = (2*precision*recall)/(precision+recall)
knn
MAE
RMSE
precision
recall
F1
fp
tp
fn
not_able_to_predict
knn = 95
#actual = read.csv("Movielense.csv",hwader = FALSE)
#sorted = read.csv("sorted2.csv")
#sim_bc = read.csv("sim_bc.csv")
#find = read.csv("find_filter.csv")
#testing = read.csv("testing.csv",header = FALSE)
#testing = data.frame(t(testing))
predict = matrix(0 , nrow = nrow(x) ,ncol =ncol(x))
predict = data.frame(predict)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
for(k in 1:knn){
if(x[find[i,k],j] > 0){
predict[i,j] = predict[i,j] + sorted[i,k]*(x[find[i,k],j]- mean[find[i,k],1])
}
}
}
}
}
predict_deno = matrix(0 , nrow = nrow(x) ,ncol = ncol(x))
predict_deno = data.frame(predict_deno)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
for(k in 1:knn){
if(x[find[i,k],j] > 0){
predict_deno[i,j] = predict_deno[i,j] + abs(sorted[i,k])
}
}
}
}
}
prediction = matrix(0 , nrow = nrow(x), ncol= ncol(x))
prediction = data.frame(prediction)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
prediction[i,j] = mean[i,1]+(predict[i,j]/predict_deno[i,j])
}
}
}
################remove the na value from prediction #####################
#prediction = read.csv("prediction.csv"
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(is.na(prediction[i,j])){
prediction[i,j] =0
}
}
}
actual = read.csv("actual.csv",header = FALSE)
actual = data.frame(t(actual))
not_able_to_predict = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(is.na(prediction[i,j])){
prediction[i,j] = 0
not_able_to_predict = not_able_to_predict+1
}
}
}
MAE = 0
count = 0
for(i in 1:nrow(prediction)){
for(j in 1:ncol(prediction)){
if(testing[i,j]==100){
count = count + 1
MAE = MAE + abs(actual[i,j]- prediction[i,j])
}
}
}
MAE = MAE/385
# -------------------- RMSE
RMSE = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
RMSE = RMSE + (actual[i,j]- prediction[i,j])*(actual[i,j]- prediction[i,j])
}
}
}
RMSE = sqrt(RMSE/385)
##########################################################################################
# true positive
tp = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(prediction[i,j] >=4 & actual[i,j]>=4){
tp = tp + 1
}
}
}
fp = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(prediction[i,j] >=4 & actual[i,j] < 4){
fp = fp+1
}
}
}
precision = tp/(fp+tp)
fn = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
if(actual[i,j] >=4 & prediction[i,j] <4 & prediction[i,j] > 0){
fn = fn+1
}
}
}
}
recall = tp/(tp+fn)
F1 = (2*precision*recall)/(precision+recall)
knn
MAE
RMSE
precision
recall
F1
fp
tp
fn
not_able_to_predict
knn = 100
#actual = read.csv("Movielense.csv",hwader = FALSE)
#sorted = read.csv("sorted2.csv")
#sim_bc = read.csv("sim_bc.csv")
#find = read.csv("find_filter.csv")
#testing = read.csv("testing.csv",header = FALSE)
#testing = data.frame(t(testing))
predict = matrix(0 , nrow = nrow(x) ,ncol =ncol(x))
predict = data.frame(predict)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
for(k in 1:knn){
if(x[find[i,k],j] > 0){
predict[i,j] = predict[i,j] + sorted[i,k]*(x[find[i,k],j]- mean[find[i,k],1])
}
}
}
}
}
predict_deno = matrix(0 , nrow = nrow(x) ,ncol = ncol(x))
predict_deno = data.frame(predict_deno)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
for(k in 1:knn){
if(x[find[i,k],j] > 0){
predict_deno[i,j] = predict_deno[i,j] + abs(sorted[i,k])
}
}
}
}
}
prediction = matrix(0 , nrow = nrow(x), ncol= ncol(x))
prediction = data.frame(prediction)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
prediction[i,j] = mean[i,1]+(predict[i,j]/predict_deno[i,j])
}
}
}
################remove the na value from prediction #####################
#prediction = read.csv("prediction.csv"
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(is.na(prediction[i,j])){
prediction[i,j] =0
}
}
}
actual = read.csv("actual.csv",header = FALSE)
actual = data.frame(t(actual))
not_able_to_predict = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(is.na(prediction[i,j])){
prediction[i,j] = 0
not_able_to_predict = not_able_to_predict+1
}
}
}
MAE = 0
count = 0
for(i in 1:nrow(prediction)){
for(j in 1:ncol(prediction)){
if(testing[i,j]==100){
count = count + 1
MAE = MAE + abs(actual[i,j]- prediction[i,j])
}
}
}
MAE = MAE/385
# -------------------- RMSE
RMSE = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
RMSE = RMSE + (actual[i,j]- prediction[i,j])*(actual[i,j]- prediction[i,j])
}
}
}
RMSE = sqrt(RMSE/385)
##########################################################################################
# true positive
tp = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(prediction[i,j] >=4 & actual[i,j]>=4){
tp = tp + 1
}
}
}
fp = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(prediction[i,j] >=4 & actual[i,j] < 4){
fp = fp+1
}
}
}
precision = tp/(fp+tp)
fn = 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(testing[i,j]==100){
if(actual[i,j] >=4 & prediction[i,j] <4 & prediction[i,j] > 0){
fn = fn+1
}
}
}
}
recall = tp/(tp+fn)
F1 = (2*precision*recall)/(precision+recall)
knn
MAE
RMSE
precision
recall
F1
fp
tp
fn
not_able_to_predict
